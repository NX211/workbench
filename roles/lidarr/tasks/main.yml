---
- name: Ensure Media Datasets Exist
  when: inventory_hostname == groups['media'][0]
  community.general.zfs:
    name: "{{ item }}"
    state: present
  loop:
    - blacktalon/media/music
    - blacktalon/media/music-videos
  tags: lidarr

- name: Ensure Media Download Datasets Exist
  when: inventory_hostname == groups['media'][0]
  community.general.zfs:
    name: "{{ item }}"
    state: present
  loop:
    - blacktalon/media/downloads/music
    - blacktalon/media/downloads/music-videos
  tags: lidarr

- name: Ensure Lidarr Dataset Exist
  when: inventory_hostname == groups['media'][0]
  community.general.zfs:
    name: blacktalon/apps/lidarr
    state: present
  tags: lidarr

- name: Ensure Lidarr Configuration Files Exist
  when: inventory_hostname == groups['media'][0]
  ansible.builtin.template:
    src: config.xml.j2
    mode: 0644
    dest: "{{ project_root_directory }}/lidarr/config.xml"
  tags: lidarr
  no_log: true

- name: Deploy Lidarr Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: lidarr
    hostname: "{{ lidarr_hostname }}"
    image: "{{ lidarr_docker_image }}:{{ lidarr_version }}"
    networks:
      - "{{ traefik_network }}"
    mode: replicated
    force_update: yes
    restart_config:
      condition: on-failure
    env:
      PUID: "{{ media_user }}"
      PGID: "{{ media_group }}"
      TZ: "{{ default_timezone }}"
      DOCKER_MODS: "gilbn/theme.park:{{ lidarr_hostname }}"
      TP_THEME: "{{ theme_park_default }}"
    placement:
      constraints:
        - node.id == {{ blacktalon_node_id }}
    replicas: 1
    mounts:
      - source: "/blacktalon/apps/lidarr/"
        target: /config/
        type: bind
      - source: "{{ project_media_directory }}/music/"
        target: /media/music/
        type: bind
      - source: "{{ project_download_directory }}"
        target: /media/downloads/
        type: bind
    labels:
      traefik.http.routers.lidarr.entrypoints: "websecure"
      traefik.http.routers.lidarr.rule: "Host(`lidarr.{{ project_tld }}`)"
      traefik.http.routers.lidarr.middlewares: "default-headers@file,authelia@file"
      traefik.http.routers.lidarr.tls: "true"
      traefik.http.routers.lidarr.service: "lidarr"
      traefik.http.routers.lidarr.tls.certresolver: "{{ default_certificate_resolver }}"
      traefik.http.services.lidarr.loadbalancer.server.port: "{{ lidarr_port }}"
      traefik.enable: "true"
    state: present
  tags: lidarr

- name: Import Automated Music Downloader
  ansible.builtin.import_tasks: "{{ role_path }}/tasks/amd.yml"
  tags:
    - lidarr

- name: Import Automated Music Video Downloader
  ansible.builtin.import_tasks: "{{ role_path }}/tasks/amvd.yml"
  tags:
    - lidarr