---
- name: Ensure Harbor Registry Directory Exist
  when: inventory_hostname == groups['workers'][0]
  file:
    path: "{{project_root_directory}}/harbor/registry"
    state: directory
  tags: harbor

- name: Deploy Harbor Registry Control Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: registry
    hostname: "{{registry_hostname}}"
    image: "{{registry_docker_image}}:{{harbor_version}}"
    networks:
      - "{{traefik_network}}"
    env:
      CORE_SECRET: ""
      JOBSERVICE_SECRET: ""
      TRACE_ENABLED: "true"
      TRACE_SERVICE_NAME: "harbor-registryctl"
      TRACE_SAMPLE_RATE: ""
      TRACE_NAMESPACE: ""
      TRACE_ATTRIBUTES: ""
      TRACE_JAEGER_ENDPOINT: ""
      TRACE_JAEGER_USERNAME: ""
      TRACE_JAEGER_PASSWORD: ""
      TRACE_JAEGER_AGENT_HOSTNAME: ""
      TRACE_JAEGER_AGENT_PORT: ""
    mounts:
      - source: "/greytalon/apps/harbor/registry/"
        target: /var/lib/postgresql/data/
        type: bind
    mode: replicated
    force_update: yes
    restart_config:
      condition: on-failure
    placement:
      constraints:
        - node.id == {{greytalon_node_id}}
    replicas: 1
    state: present
  tags: harbor

- name: Deploy Harbor Registry Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: registry
    hostname: "{{registry_hostname}}"
    image: "{{registry_docker_image}}:{{harbor_version}}"
    networks:
      - "{{traefik_network}}"
    env:
      POSTGRES_PASSWORD: "{{harbor_registry_password}}"
    mounts:
      - source: "/greytalon/apps/harbor/registry/"
        target: /var/lib/postgresql/data/
        type: bind
    mode: replicated
    force_update: yes
    restart_config:
      condition: on-failure
    placement:
      constraints:
        - node.id == {{greytalon_node_id}}
    replicas: 1
    state: present
  tags: harbor