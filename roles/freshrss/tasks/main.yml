---
- name: Ensure Freshrss Data Volume Exist
  when: inventory_hostname == groups['managers'][0]
  docker_volume:
    name: freshrss_data
    state: present
  tags: freshrss

- name: Ensure Freshrss Extensions Volume Exist
  when: inventory_hostname == groups['managers'][0]
  docker_volume:
    name: freshrss_extensions
    state: present
  tags: freshrss

- import_tasks: roles/postgres/tasks/database_manager.yml
  when: inventory_hostname == groups['managers'][0]
  vars:
    database_name: "{{ freshrss_database }}"
    database_user: "{{ freshrss_database_user }}"
    database_password: "{{ freshrss_database_password }}"
  tags: freshrss
  no_log: true

- name: Deploy Freshrss Service
  when: inventory_hostname == groups['managers'][0]
  community.docker.docker_swarm_service:
    name: freshrss
    hostname: "{{ freshrss_hostname }}"
    image: "{{ freshrss_docker_image }}:{{ freshrss_version }}"
    env:
      BASE_URL: "https://rss.{{ project_tld }}"
      PUBLISHED_PORT: "80"
      TZ: "{{ default_timezone }}"
      DB_HOST: "{{ postgres_hostname }}"
      DB_BASE: "{{ freshrss_database }}"
      DB_USER: "{{ freshrss_database_user }}"
      DB_PASSWORD: "{{ freshrss_database_password }}"
      ADMIN_EMAIL: "{{ freshrss_admin_email }}"
      ADMIN_PASSWORD: "{{ freshrss_admin_password }}"
      ADMIN_API_PASSWORD: "{{ freshrss_api_password }}"
    networks:
      - "{{ traefik_network }}"
    mode: replicated
    force_update: yes
    restart_config:
      condition: on-failure
    placement:
      constraints:
        - node.id == {{ greytalon_node_id }}
    replicas: 1
    mounts:
      - source: freshrss_data
        target: /var/www/FreshRSS/data/
        type: volume
      - source: freshrss_extensions
        target: /var/www/FreshRSS/extensions/
        type: volume
    labels:
      traefik.http.routers.freshrss.entrypoints: "websecure"
      traefik.http.routers.freshrss.rule: "Host(`rss.{{ project_tld }}`)"
      traefik.http.routers.freshrss.middlewares: "default-headers@file"
      traefik.http.routers.freshrss.tls: "true"
      traefik.http.routers.freshrss.service: "freshrss"
      traefik.http.routers.freshrss.tls.certresolver: "{{ default_certificate_resolver }}"
      traefik.http.services.freshrss.loadbalancer.server.port: "{{ freshrss_port }}"
      traefik.enable: "true"
    state: present
  tags: freshrss

- import_tasks: "{{ role_path }}/tasks/bridge.yml"
  tags:
    - freshrss
